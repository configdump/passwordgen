#!/usr/bin/env python
"""
Purpose: Create random passwords.
Author: Bharath Shetty
Created: 26.04.2022
"""

import argparse
import string
import secrets

parser = argparse.ArgumentParser(description="Password Generator")
parser.add_argument('-l', '--length', help="Password length",
                    default=18, type=int)
parser.add_argument('-n', '--number', help="Number of Passwords to be generated",
                    default=40, type=int)
parser.add_argument('-u', '--upper', help="Exclude Upper Case",
                    action='store_false', default=True)
parser.add_argument('-d', '--digits', help="Exclude digits",
                    action='store_false', default=True)
parser.add_argument('-p', '--punctuation', help="Exclude punctuations",
                    action='store_false', default=True)
args = parser.parse_args()


class PasswordGenerator:
    """ password generator"""
    def __init__(self, arguments):
        """ password generator"""
        self.args = arguments
        self.combination = self.get_combination()
        self.length = self.args.length
        self.number = self.args.number

    def get_combination(self):
        """ Get combinations """
        combination = string.ascii_lowercase
        if self.args.upper:
            combination += string.ascii_uppercase
        if self.args.digits:
            combination += string.digits
        if self.args.punctuation:
            combination += string.punctuation
        return combination

    def generate_password(self):
        """ Generate passwords """
        combination_length = len(self.combination)
        new_password = ""
        for _ in range(self.length):
            new_password += self.combination[secrets.randbelow(combination_length)]
        return new_password

    def generate_multiple(self):
        """ Generate and print multiple passwords"""
        passwords = []
        for _ in range(self.number):
            passwords.append(self.generate_password())
        return passwords

    @staticmethod
    def divide_chunks(pass_list, chunk_len):
        """ Chunked list"""
        # looping till length l
        for i in range(0, len(pass_list), chunk_len):
            yield pass_list[i:i + chunk_len]

    def run(self):
        """ Run"""
        passwords = self.generate_multiple()
        chunked_list = list(self.divide_chunks(passwords, 4))
        print("-"*((self.args.length + 4)*4))
        for i in chunked_list:
            print(*i, sep='    ')
        print("-" * ((self.args.length + 4) * 4))
        print(f"Length: {self.args.length}, Count: {self.args.number}, "
              f"Upper: {self.args.upper}, digits: {self.args.digits}, "
              f"punctuation: {self.args.punctuation}")
        print("-" * ((self.args.length + 4) * 4))


if __name__ == "__main__":
    PasswordGenerator(args).run()
